import ROOT as rt
import numpy as np

f = rt.TFile("DispMu_2to100GeV_PU200_D49_extended.root",'read')
tree = f.Get("L1TrackNtuple/eventTree")

d0bin = 100.
d0max = 20.
d0min = -20.

d0 = [i for evt in tree for i in evt.tp_d0]
d0_match = [(abs(i) != 999,i) for evt in tree for i in evt.matchtrk_d0]
id  = [i for evt in tree for i in evt.tp_pdgid]
pt = [i for evt in tree for i in evt.tp_pt]
eta = [i for evt in tree for i in evt.tp_eta]
eventid = [i for evt in tree for i in evt.tp_eventid]

abs_d0 = [abs(i) for i in d0]

d0_compare = zip(abs_d0, d0_match, id, pt, eta, eventid)
d0_compare_cut = [i for i in d0_compare if not np.isnan(i[0]) and abs(i[2]) == 13 and 2 < i[3] < 20 and abs(i[4]) < 2 and i[5] == 0] ##contains cuts for eta, pt, and pileup

d0_eff = []
d0binnum = np.arange(d0bin)
d0binrange = (d0binnum*(d0max - d0min)/d0bin) + d0min

x = 0
for i in d0binrange:
    try:
        bin_d0 = [j for j in d0_compare_cut if i < j[0] < d0binrange[x+1]]
    except IndexError:
        bin_d0 = [j for j in d0_compare_cut if i <j[0] < d0max]
    n_d0 = np.shape(bin_d0)[0]
    n_d0match = np.shape([j for j in bin_d0 if j[1][0]])[0]
    try:
        d0_eff.append((round(float(n_d0match)/float(n_d0), 3), n_d0match, n_d0))
    except ZeroDivisionError:
        d0_eff.append((0,0,0))
    x += 1

h_d0 = rt.TH1F('h_d0','|d_{0}| Distribution of Gen Tracks',int(d0bin),0.,d0max)
h_d0.GetXaxis().SetTitle('Absolute Value of Transverse Impact Parameter [cm]')
h_d0.GetYaxis().SetTitle('Counts per Bin')
h_d0Match = rt.TH1F('h_d0Match','|d_{0}| Distribution of Matched Gen Tracks',int(d0bin),0.,d0max)
h_d0Match.GetXaxis().SetTitle('Absolute Value of Transverse Impact Parameter [cm]')
h_d0Match.GetYaxis().SetTitle('Counts per Bin')
h_d0Reco = rt.TH1F('h_d0Reco','|d_{0}| Distrubtion of Matched Reconstructed Tracks',int(d0bin),0,d0max)
h_d0Reco.GetXaxis().SetTitle('Absolute Value of Transverse Impact Parameter [cm]')
h_d0Reco.GetYaxis().SetTitle('Counts per Bin')

for i in d0_compare_cut:
   h_d0.Fill(i[0])
   if i[1][0]:
        h_d0Match.Fill(i[0])
        h_d0Reco.Fill(i[1][1])

#h_d0.Draw()

#h_d0Match.Draw()

#h_d0Reco.Draw()

h_d0Ratio = h_d0Match.Clone('h_d0Ratio')
h_d0Ratio.Divide(h_d0Match,h_d0,1.,1.)
h_d0Ratio.SetTitle('|d_{0}| Gen Particle Tracking Efficiency for Muons Only')
h_d0Ratio.GetXaxis().SetTitle("|d_{0}| [cm]")
h_d0Ratio.GetYaxis().SetTitle('Efficiency')

## for error bars (makes it hard to read)
#for i in d0binnum:
    #try:
        #h_d0Ratio.SetBinError(int(i) + 1, np.sqrt(d0_eff[int(i)][0]*(1 - d0_eff[int(i)][0])/d0_eff[int(i)][2]))
    #except ZeroDivisionError:
        #h_d0Ratio.SetBinError(int(i) + 1, 0)


h_d0Ratio.Draw()
